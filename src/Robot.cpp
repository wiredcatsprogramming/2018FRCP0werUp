// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include <iostream>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::unique_ptr<OI> Robot::oi;

std::shared_ptr<frc::Joystick> joystick;
std::shared_ptr<frc::Joystick> xboxController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveTrain.reset(new DriveTrain());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


	chooser.AddDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	frc::SmartDashboard::PutData("Auto Modes", &chooser);



	joystick = oi->getJoystick();
	xboxController = oi->getXboxController();


}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomousCommand = chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
	{
		autonomousCommand->Cancel();
	}




}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();

	RunTankMode();

}

void Robot::TestPeriodic()
{
	std::shared_ptr<frc::Joystick> joystick = oi->getJoystick();
	std::shared_ptr<frc::Joystick> xboxController = oi->getXboxController();

	xboxController->GetRawAxis(1);
	std::cout<<xboxController->GetRawAxis(5) << std::endl;
	//driveTrain->driverLeftBack->Set(-xboxController->GetRawAxis(1));


}



void Robot::RunTankMode()
{


	double leftJoystickYAxis = xboxController->GetRawAxis(1) * -1;
	double rightJoystickYAxis = xboxController->GetRawAxis(5);

	/* Adds at dead zone, since the joysticks aren't zero when they
	 * aren't being touched. Checks if the value of the joysticks is
	 * outside out dead zone before it outputs to the motor
	*/
	if (leftJoystickYAxis > 0.06 || leftJoystickYAxis < -0.06)
	{
		driveTrain->driverLeft->Set(SmoothDriveCurve(leftJoystickYAxis));
	}

	if (rightJoystickYAxis > 0.06 || rightJoystickYAxis < -0.06)
	{
		driveTrain->driverRight->Set(SmoothDriveCurve(rightJoystickYAxis));
	}


}

double Robot::SmoothDriveCurve(double joystickYPosition)
{
	// variable a=a in equation b=b in equation
	//ax^2+bx+c the Equation for a parabola
	double curvePoints[] = {0.5, 0.15, 1.0, 0.9};

	double b = ((curvePoints[3] * curvePoints[0] * curvePoints[0]) - curvePoints[1]) /
			((curvePoints[0] * curvePoints[0]) - curvePoints[0]);
	double a = curvePoints[3] - b;

	// Returns the corresponding motor speed
	// The multiplecation at the end is to make sure it is the correct sign
	return ((a * joystickYPosition * joystickYPosition) + (b * joystickYPosition)) *
			(std::abs(joystickYPosition) / joystickYPosition);



}




START_ROBOT_CLASS(Robot);

